#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

//uniform vec3 colorObject;

struct Material {
    sampler2D diffuse1;
    sampler2D diffuse2;
    vec3 specular;
    float shininess;
    float key;
}; 

struct PointLight {    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

#define NR_POINT_LIGHTS 8  
#define NR_POINT_LAVA 40  

uniform vec3 viewPos;
uniform Material material;
//uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform PointLight pointLava[NR_POINT_LAVA];

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
 // свойства
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 result  = {0.0, 0.0, 0.0};	
    // фаза 1: Направленный источник освещения
    //vec3 result = CalcDirLight(dirLight, norm, viewDir);
    // фаза 2: Точечные источники
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
       result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);  
    for(int i = 0; i < NR_POINT_LAVA; i++)
       result += CalcPointLight(pointLava[i], norm, FragPos, viewDir);      
    // фаза 3: фонарик
    //result += CalcSpotLight(spotLight, norm, FragPos, viewDir);       
    FragColor = vec4(result, 1.0);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    // ambient
    vec3 ambient = light.ambient * vec3( mix ( texture(material.diffuse1, TexCoord), texture(material.diffuse2, TexCoord), material.key ) );

    // diffuse shading
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    //vec3 diffuse = light.diffuse *(diff *  vec3( mix ( texture(material.diffuse1, TexCoord), texture(material.diffuse2, TexCoord), material.key ) )  );
    vec3 diffuse = light.diffuse *diff;

    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * material.specular);

    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results    

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 
